Задание 1 — Создание простого класса: 

#include <iostream>
#include <string>
class Book {
public:
    std::string title;
    std::string author;
    int year;
    void display() {
        std::cout << "Название: " << title << ", Автор: " << author << ", Год: " << year << std::endl;
    }
};

int main() {
    Book book1;
    book1.title = "1984";
    book1.author = "George Orwell";
    book1.year = 1949;
    book1.display();
    return 0;
}


Задание 2 — Конструкторы
#include <iostream>
#include <string>
class Book {
public:
    std::string title;
    std::string author;
    int year;
    Book() : title(""), author(""), year(0) {}
    Book(const std::string& t, const std::string& a, int y) : title(t), author(a), year(y) {}
    void display() {
        std::cout << "Название: " << title << ", Автор: " << author << ", Год: " << year << std::endl;
    }
};

int main() {
    Book book1;
    Book book2("Мастер и Маргарита", "Михаил Булгаков", 1967);
    book1.display();
    book2.display();
    return 0;
}


Задание 3 — Деструктор
#include <iostream>
#include <string>
class Book {
public:
    std::string title;
    std::string author;
    int year;
    Book() : title(""), author(""), year(0) {}
    Book(const std::string& t, const std::string& a, int y) : title(t), author(a), year(y) {}
    ~Book() {
        std::cout << "Книга '" << title << "' уничтожена." << std::endl;
    }
    void display() {
        std::cout << "Название: " << title << ", Автор: " << author << ", Год: " << year << std::endl;
    }
};

int main() {
    Book b("Война и мир", "Лев Толстой", 1869);
    b.display();
    // При выходе из main будет вызван деструктор
    return 0;
}


Задание 4 — Модификаторы доступа
#include <iostream>
#include <string>
class BankAccount {
private:
    double balance;
public:
    std::string owner;
    BankAccount(const std::string& o, double b) : owner(o), balance(b) {}
    void deposit(double amount) {
        if (amount > 0) balance += amount;
    }
    bool withdraw(double amount) {
        if (amount <= balance) {
            balance -= amount;
            return true;
        }
        return false;
    }
    double getBalance() const {
        return balance;
    }
};

int main() {
    BankAccount acc("Иван Иванов", 1000);
    acc.deposit(500);
    acc.withdraw(200);
    std::cout << acc.owner << ", баланс: " << acc.getBalance() << std::endl;
    return 0;
}


Задание 5 — Композиция классов
#include <iostream>
class Engine {
public:
    int power;
    Engine(int p) : power(p) {}
    void start() {
        std::cout << "Двигатель запущен с мощностью " << power << " л.с." << std::endl;
    }
};

class Car {
private:
    Engine engine;
public:
    Car(int power) : engine(power) {}
    void startCar() {
        engine.start();
        std::cout << "Автомобиль заведен." << std::endl;
    }
};

int main() {
    Car car(150);
    car.startCar();
    return 0;
}


Задание 6 — Перегрузка методов
#include <iostream>
class Calculator {
public:
    int add(int a, int b) {
        return a + b;
    }
    double add(double a, double b) {
        return a + b;
    }
    int add(int a, int b, int c) {
        return a + b + c;
    }
};

int main() {
    Calculator calc;
    std::cout << calc.add(1, 2) << std::endl;
    std::cout << calc.add(2.5, 3.7) << std::endl;
    std::cout << calc.add(1, 2, 3) << std::endl;
    return 0;
}


Задание 7 — Статические члены класса
#include <iostream>
#include <string>
class BankAccount {
private:
    double balance;
    static int totalAccounts;
public:
    std::string owner;
    BankAccount(const std::string& o, double b) : owner(o), balance(b) {
        ++totalAccounts;
    }
    ~BankAccount() { --totalAccounts; }
    void deposit(double amount) {
        if (amount > 0) balance += amount;
    }
    bool withdraw(double amount) {
        if (amount <= balance) { balance -= amount; return true; }
        return false;
    }
    double getBalance() const { return balance; }

    static int getTotalAccounts() { return totalAccounts; }
};
int BankAccount::totalAccounts = 0;

int main() {
    BankAccount acc1("Иван", 1000);
    BankAccount acc2("Петр", 500);
    std::cout << "Всего счетов: " << BankAccount::getTotalAccounts() << std::endl;
    {
        BankAccount acc3("Сергей", 10);
        std::cout << "Всего счетов: " << BankAccount::getTotalAccounts() << std::endl;
    }
    std::cout << "Всего счетов: " << BankAccount::getTotalAccounts() << std::endl;
    return 0;
}


Задание 8 — Конструктор копирования
#include <iostream>
#include <string>
class Student {
public:
    std::string name;
    int age;
    Student(const std::string& n, int a) : name(n), age(a) {}
    Student(const Student& other) : name(other.name), age(other.age) {
        std::cout << "Вызван конструктор копирования!" << std::endl;
    }
};

int main() {
    Student s1("Мария", 21);
    Student s2 = s1;
    std::cout << "s2: " << s2.name << ", " << s2.age << std::endl;
    return 0;
}


Задание 9 — Перегрузка операторов
#include <iostream>
class Fraction {
public:
    int numerator;
    int denominator;
    Fraction(int n, int d) : numerator(n), denominator(d) {}

    Fraction operator+(const Fraction& other) const {
        int common = denominator * other.denominator;
        int num = numerator * other.denominator + other.numerator * denominator;
        int g = gcd(num, common);
        return Fraction(num / g, common / g);
    }
    static int gcd(int a, int b) {
        while(b) {
            int t = b;
            b = a % b;
            a = t;
        }
        return a;
    }
    void print() const {
        std::cout << numerator << "/" << denominator << std::endl;
    }
};

int main() {
    Fraction f1(1, 4);
    Fraction f2(1, 6);
    Fraction f3 = f1 + f2;
    f3.print(); // 5/12
    return 0;
}


Задание 10 — Композиция и агрегация
#include <iostream>
#include <string>
#include <vector>
class Book {
public:
    std::string title;
    std::string author;
    int year;
    Book() : title(""), author(""), year(0) {}
    Book(const std::string& t, const std::string& a, int y) : title(t), author(a), year(y) {}
    void display() const {
        std::cout << "Название: " << title << ", Автор: " << author << ", Год: " << year << std::endl;
    }
};

class Library {
private:
    std::vector<Book> books;
public:
    void addBook(const Book& book) { books.push_back(book); }
    void displayAllBooks() const {
        for (const auto& book : books) {
            book.display();
        }
    }
};

int main() {
    Library lib;
    Book b1("1984", "George Orwell", 1949);
    Book b2("Мастер и Маргарита", "Михаил Булгаков", 1967);
    Book b3("Война и мир", "Лев Толстой", 1869);
    lib.addBook(b1);
    lib.addBook(b2);
    lib.addBook(b3);
    lib.displayAllBooks();
    return 0;
}