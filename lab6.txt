1. –ë–∞–∑–æ–≤–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
#include <iostream>
class Vehicle {
public:
    void start() { std::cout << "Vehicle started" << std::endl; }
    void stop()  { std::cout << "Vehicle stopped" << std::endl; }
};

class Car : public Vehicle {
public:
    void honk() { std::cout << "Car beeps! üöó" << std::endl; }
};

class Bicycle : public Vehicle {
public:
    void ringBell() { std::cout << "Bicycle rings bell! üö≤" << std::endl; }
};

int main() {
    Car c;
    c.start();
    c.honk();
    c.stop();

    Bicycle b;
    b.start();
    b.ringBell();
    b.stop();
    return 0;
}


2. –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤
#include <iostream>
class Shape {
public:
    virtual void draw() const { std::cout << "Drawing shape..." << std::endl; }
};

class Circle : public Shape {
public:
    void draw() const override { std::cout << "Drawing circle" << std::endl; }
};

class Square : public Shape {
public:
    void draw() const override { std::cout << "Drawing square" << std::endl; }
};

class Triangle : public Shape {
public:
    void draw() const override { std::cout << "Drawing triangle" << std::endl; }
};

int main() {
    Shape* shapes[3] = { new Circle(), new Square(), new Triangle() };
    for(int i=0;i<3;++i) shapes[i]->draw();
    for(int i=0;i<3;++i) delete shapes[i];
    return 0;
}


3. –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å
#include <iostream>
#include <vector>
class Animal {
public:
    virtual void makeSound() const = 0;
    virtual ~Animal() {}
};

class Dog : public Animal {
public:
    void makeSound() const override { std::cout << "Woof!" << std::endl; }
};
class Cat : public Animal {
public:
    void makeSound() const override { std::cout << "Meow!" << std::endl; }
};
class Cow : public Animal {
public:
    void makeSound() const override { std::cout << "Moo!" << std::endl; }
};

void animalSounds(const std::vector<Animal*>& animals) {
    for(const Animal* a : animals)
        a->makeSound();
}

int main() {
    std::vector<Animal*> v = {new Dog, new Cat, new Cow};
    animalSounds(v);
    for(Animal* a : v) delete a;
    return 0;
}


4. –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
#include <iostream>
#include <string>
class Person {
protected:
    std::string name;
public:
    Person(const std::string& n) : name(n) {}
    void introduce() { std::cout << "Name: " << name << std::endl; }
};

class Employee : public Person {
protected:
    std::string position;
public:
    Employee(const std::string& n, const std::string& p) : Person(n), position(p) {}
    void work() { std::cout << name << " —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ " << position << std::endl; }
};

class Manager : public Employee {
protected:
    int teamSize;
public:
    Manager(const std::string& n, const std::string& p, int t)
      : Employee(n,p), teamSize(t) {}
    void manage() { std::cout << name << " —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π –∏–∑ " << teamSize << " —á–µ–ª–æ–≤–µ–∫" << std::endl; }
};

int main() {
    Manager m("–û–ª–µ–≥", "Team Lead", 5);
    m.introduce();
    m.work();
    m.manage();
    return 0;
}


5. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
#include <iostream>
class Printer {
public:
    void print() { std::cout << "–ü–µ—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞..." << std::endl; }
};

class Scanner {
public:
    void scan() { std::cout << "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞..." << std::endl; }
};

class Copier : public Printer, public Scanner {};

int main() {
    Copier c;
    c.print();
    c.scan();
    return 0;
}


6. –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
#include <iostream>
// 1. –ë–µ–∑ virtual
class Base {
public:
    ~Base() { std::cout << "Base dtor" << std::endl; }
};

class Derived : public Base {
    int* arr;
public:
    Derived() { arr = new int[100]; }
    ~Derived() { std::cout << "Derived dtor" << std::endl; delete[] arr; }
};

void test1() {
    Base* ptr = new Derived();
    delete ptr;  // –í—ã–∑–≤–∞–Ω —Ç–æ–ª—å–∫–æ Base::~Base, –ø–∞–º—è—Ç—å –∏–∑-–ø–æ–¥ arr –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞!
}

// 2. –° virtual
class VBase {
public:
    virtual ~VBase() { std::cout << "VBase dtor" << std::endl; }
};
class VDerived : public VBase {
    int* arr;
public:
    VDerived() { arr = new int[100]; }
 ~VDerived() { std::cout << "VDerived dtor" << std::endl; delete[] arr; }
};

void test2() {
    VBase* ptr = new VDerived();
    delete ptr; // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–Ω–∞—á–∞–ª–∞ VDerived::~VDerived, –∑–∞—Ç–µ–º VBase::~VBase
}

int main() {
    test1();
    test2();
    return 0;
}

7. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã (—á–∏—Å—Ç–æ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã)
C++

#include <iostream>
class Drawable {
public:
    virtual void draw() const = 0;
    virtual double getArea() const = 0;
    virtual ~Drawable() {}
};

class Rectangle : public Drawable {
    double w, h;
public:
    Rectangle(double wi, double he) : w(wi), h(he) {}
    void draw() const override { std::cout << "Draw rectangle" << std::endl; }
    double getArea() const override { return w * h; }
};

class Circle : public Drawable {
    double r;
public:
    Circle(double radius) : r(radius) {}
    void draw() const override { std::cout << "Draw circle" << std::endl; }
    double getArea() const override { return 3.14159 * r * r; }
};

void printInfo(const Drawable& d) {
    d.draw();
    std::cout << "–ü–ª–æ—â–∞–¥—å: " << d.getArea() << std::endl;
}

int main() {
    Rectangle a(2,3);
    Circle b(1);
    printInfo(a);
    printInfo(b);
    return 0;
}

8. –ó–∞—â–∏—â—ë–Ω–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
C++

#include <iostream>
class Base {
public:
    int pub = 1;
protected:
    int prot = 2;
private:
    int priv = 3;
};

class DerivedPublic : public Base {
public:
    void show() {
        std::cout << pub << " " << prot << std::endl;
    }
};

class DerivedProtected : protected Base {
public:
    void show() {
        std::cout << pub << " " << prot << std::endl;
    }
};

class DerivedPrivate : private Base {
public:
    void show() {
        std::cout << pub << " " << prot << std::endl;
    }
};

int main() {
    DerivedPublic dp;
    dp.pub = 10; // –ú–æ–∂–Ω–æ –¥–æ—Å—Ç—É–ø–∏—Ç—å—Å—è pub
    dp.show();
    // DerivedProtected dpr; dpr.pub; // –û—à–∏–±–∫–∞!
    // DerivedPrivate dpi; dpi.pub; // –û—à–∏–±–∫–∞!
    return 0;
}
public –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: pub ‚Äî public, prot ‚Äî protected; protected: pub –∏ prot —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è protected; private ‚Äî –≤—Å—ë —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è private.

9. –ö–æ–º–ø–æ–∑–∏—Ü–∏—è vs –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
C++

#include <iostream>
class Engine {
public:
    void start() { std::cout << "–î–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–ø—É—â–µ–Ω" << std::endl; }
};

// –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
class CarInherit : public Engine {};
// –ö–æ–º–ø–æ–∑–∏—Ü–∏—è
class CarComposed {
    Engine engine;
public:
    void startCar() { engine.start(); }
};

int main() {
    CarInherit a;
    a.start(); // start –∏–∑ Engine

    CarComposed b;
    b.startCar();

    return 0;
}
–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: Car —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è "—è–≤–ª—è–µ—Ç—Å—è Engine", –Ω–∞—Å–ª–µ–¥—É–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã. –ö–æ–º–ø–æ–∑–∏—Ü–∏—è: Car –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Engine –∫–∞–∫ —á–∞—Å—Ç—å —Å–µ–±—è, —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.
–ü–ª—é—Å—ã –∫–æ–º–ø–æ–∑–∏—Ü–∏–π ‚Äî –≥–∏–±–∫–æ—Å—Ç—å –∏ –º–µ–Ω—å—à–µ —Ä–∏—Å–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–º—ë–Ω, –º–∏–Ω—É—Å ‚Äî –º–µ–Ω—å—à–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ç–æ–¥–∞–º Engine.

10. –§–∏–Ω–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ –º–µ—Ç–æ–¥—ã
C++

#include <iostream>
class Base {
public:
    virtual void foo() {}
    virtual void bar() final {} // final - –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
};
// –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±–∞ –º–µ—Ç–æ–¥–∞:
class Derived : public Base {
public:
    void foo() override {}         // OK
    // void bar() override {}     // –û—à–∏–±–∫–∞: bar –æ–±—ä—è–≤–ª–µ–Ω –∫–∞–∫ final!
};
// –ï—Å–ª–∏ —Å–¥–µ–ª–∞—Ç—å –≤–µ—Å—å –∫–ª–∞—Å—Å final:
class FinalClass final {};
// class Another : public
